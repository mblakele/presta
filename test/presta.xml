<!--
    : Copyright (c)2011-2012 Michael Blakeley. All Rights Reserved.
    :
    : Licensed under the Apache License, Version 2.0 (the "License");
    : you may not use this file except in compliance with the License.
    : You may obtain a copy of the License at
    :
    : http://www.apache.org/licenses/LICENSE-2.0
    :
    : Unless required by applicable law or agreed to in writing, software
    : distributed under the License is distributed on an "AS IS" BASIS,
    : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    : See the License for the specific language governing permissions and
    : limitations under the License.
    :
    : The use of the Apache License does not indicate that this project is
    : affiliated with the Apache Software Foundation.
-->
<!-- cf https://github.com/mblakele/xqut -->
<suite xmlns="com.blakeley.xqut"
       xmlns:xs="http://www.w3.org/2001/XMLSchema"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="com.blakeley.presta">
  <environment
      root="/Users/mblakele/Source/mblakele-presta/src/"
      database-name="Documents">
    <import prefix="p" ns="com.blakeley.presta" at="presta.xqy"/>
    <import prefix="c" ns="com.blakeley.cprof" at="cprof.xqy"/>
  </environment>

  <setup note="install">p:install()</setup>

  <setup note="test role">
    <environment database-name="Security" />
    <expr>
      p:install-security-roles(
        element sec:role {
          element sec:role-name { 'presta-test' } })
    </expr>
  </setup>

  <setup note="test role privileges">
    <environment database-name="Security" />
    <!--
        These roles are not strictly necessary for presta:prepare,
        but are needed for other functionality such as xslt or forget-all.
     -->
    <expr>
      p:install-security-privileges(
        for $p in (
          'xdmp-eval', 'xdmp-eval-in', 'xdmp-eval-modules-change',
          'xdmp-xslt-invoke', 'xdmp-xslt-invoke-modules-change',
          'xdmp-spawn', 'xdmp-spawn-modules-change')
        return element sec:privilege {
          element sec:privilege-name { replace($p, '^xdmp-', 'xdmp:') },
          element sec:action {
            concat(
              'http://marklogic.com/xdmp/privileges/',
              replace($p, '^xdmp-xslt-', 'xslt-')) },
          element sec:kind { 'execute' },
          element sec:role-name { 'presta-test' } })
    </expr>
  </setup>

  <setup note="test user configuration">
    <environment database-name="Security" />
    <expr>
      p:install-security-users(
        element sec:user {
          element sec:user-name { 'presta-test' },
          element sec:password {
            xdmp:integer-to-hex(xdmp:random()) },
          element sec:role-name { 'presta' },
          element sec:role-name { 'presta-test' } })
    </expr>
  </setup>

  <unit note="parse test" fatal="true">()</unit>

  <unit note="appkey">
    <environment user-name="presta-test" />
    <result xsi:type="xs:boolean">true</result>
    <expr>xdmp:hex-to-integer(p:appkey()) eq xdmp:server()</expr>
  </unit>

  <unit note="appkey-set">
    <environment user-name="presta-test" />
    <result xsi:type="xs:string">TEST</result>
    <expr>
      p:appkey-set('TEST'),
      p:appkey()
    </expr>
  </unit>

  <unit note="prepare">
    <environment user-name="presta-test" />
    <result xsi:type="xs:boolean">true</result>
    <expr>
      p:appkey-set('TEST'),
      let $xqy := 'xquery version "1.0-ml"; xdmp:log("hello world!")'
      return p:prepare($xqy) instance of xs:unsignedLong
    </expr>
  </unit>

  <unit note="invoke prepared">
    <environment user-name="presta-test" />
    <result xsi:type="xs:integer">55</result>
    <expr>
      p:appkey-set('TEST'),
      let $xqy := 'xquery version "1.0-ml"; declare variable $ID external; $ID'
      let $presta-id := p:prepare($xqy)
      return sum(
        for $i in 1 to 10 return p:invoke(
          $presta-id, (xs:QName('ID'), $i)))
    </expr>
  </unit>

  <!-- result will be empty -->
  <unit note="xslt-invoke prepared" fatal="true">
    <environment user-name="presta-test" />
    <expr>
    p:appkey-set('TEST'),
    let $source := &lt;xsl:stylesheet
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xdmp="http://marklogic.com/xdmp"
      version="2.0">
      &lt;xsl:template match="*">
      &lt;xsl:apply-templates select="xdmp:sleep(5)"/>
      &lt;/xsl:template>
    &lt;/xsl:stylesheet>
    let $presta-id := p:prepare($source)
    return p:xslt-invoke($presta-id, &lt;test/>)/*
    </expr>
  </unit>

  <!-- result will be empty -->
  <unit note="library import">
    <environment user-name="presta-test" />
    <expr>
    p:appkey-set('TEST'),
    p:import(
      'lib-test.xqy', '
        xquery version "1.0-ml";
        module namespace t="com.blakeley.presta.test";
        declare function t:now() { fn:current-dateTime() };')
    </expr>
  </unit>

  <unit note="library usage">
    <environment user-name="presta-test" />
    <result xsi:type="xs:boolean">true</result>
    <expr>
      p:appkey-set('TEST'),
      p:invoke(
        p:prepare(
          'xquery version "1.0-ml";
          import module namespace t="com.blakeley.presta.test"
           at "lib-test.xqy";
          t:now() instance of xs:dateTime'))
    </expr>
  </unit>

  <unit note="spawn prepared">
    <environment user-name="presta-test" />
    <expr>
      p:appkey-set('TEST'),
      p:spawn(
        p:prepare('xquery version "1.0-ml"; xdmp:log("hello world")'))
    </expr>
  </unit>

  <unit note="spawn prepared, with result">
    <environment user-name="presta-test" />
    <result xsi:type="xs:integer">55</result>
    <expr>
      p:appkey-set('TEST'),
      let $xqy := 'xquery version "1.0-ml"; declare variable $ID external; $ID'
      let $presta-id := p:prepare($xqy)
      return sum(
        for $i in 1 to 10 return p:spawn(
          $presta-id,
          (xs:QName('ID'), $i),
          &lt;options xmlns="xdmp:eval">
            &lt;result>true&lt;/result>
          &lt;/options>))
    </expr>
  </unit>

  <unit note="spawn prepared, with results and parallelism">
    <environment user-name="presta-test" />
    <expr>
      p:appkey-set('TEST'),
      let $presta-id := p:prepare('xquery version "1.0-ml"; xdmp:sleep(500)')
      for $i in 1 to 4 return p:spawn(
        $presta-id, (),
        &lt;options xmlns="xdmp:eval">
          &lt;result>true&lt;/result>
        &lt;/options>)
    </expr>
  </unit>

  <unit note="forget-all">
    <environment user-name="presta-test" />
    <expr>
    p:appkey-set('TEST'),
    p:forget-all()
    </expr>
  </unit>

  <!-- cprof tests -->

  <unit note="cprof default disabled">
    <result xsi:type="xs:boolean">0</result>
    <expr>c:enabled()</expr>
  </unit>

  <unit note="cprof empty report">
    <result xsi:type="xs:boolean">1</result>
    <expr>empty(c:report())</expr>
  </unit>

  <unit note="profile with eval">
    <result>2</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:eval('xdmp:sleep(5)'),
      count(c:report())
    </expr>
  </unit>

  <unit note="profile with eval, two args">
    <result>2</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:eval(
        'declare variable $millis external; xdmp:sleep($millis)',
        (xs:QName('millis'), 5)),
      count(c:report())
    </expr>
  </unit>

  <unit note="profile with eval, three args">
    <result>2</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:eval(
        'define variable $millis external xdmp:sleep($millis)',
        (xs:QName('millis'), 5),
        <options xmlns="xdmp:eval">
          <default-xquery-version>0.9-ml</default-xquery-version>
        </options>),
      count(c:report())
    </expr>
  </unit>

  <unit note="profile with invoke">
    <result>2</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:invoke('test.xqy'),
      count(c:report())
    </expr>
  </unit>

  <unit note="profile with value">
    <result>2</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:value('xdmp:sleep(5)'),
      count(c:report())
    </expr>
  </unit>

  <unit note="profile with xslt-eval">
    <result>2</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:xslt-eval(
      &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xdmp="http://marklogic.com/xdmp"
      version="2.0">
      &lt;xsl:template match="*">
      &lt;xsl:apply-templates select="xdmp:sleep(5)"/>
      &lt;/xsl:template>
      &lt;/xsl:stylesheet>,
      &lt;test/>)/*,
      count(c:report())
    </expr>
  </unit>

  <unit note="profile with xslt-invoke">
    <result>2</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:xslt-invoke('test.xsl', &lt;test/>)/*,
      count(c:report())
    </expr>
  </unit>

  <unit note="profile with eval and merge">
    <result>1</result>
    <expr>
      c:enable(),
      xdmp:sleep(5),
      c:eval('xdmp:sleep(5)'),
      count(c:report(true()))
    </expr>
  </unit>

  <teardown note="remove test user">
    <environment database-name="Security" />
    <expr>
      import module "http://marklogic.com/xdmp/security"
        at "/MarkLogic/security.xqy" ;

      sec:remove-user('presta-test')
    </expr>
  </teardown>

  <teardown note="remove test role">
    <environment database-name="Security" />
    <expr>
      import module "http://marklogic.com/xdmp/security"
        at "/MarkLogic/security.xqy" ;

      sec:remove-role('presta-test')
    </expr>
  </teardown>

  <teardown note="uninstall">p:uninstall()</teardown>

</suite>
