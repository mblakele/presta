<!--
    : Copyright (c)2011-2012 Michael Blakeley. All Rights Reserved.
    :
    : Licensed under the Apache License, Version 2.0 (the "License");
    : you may not use this file except in compliance with the License.
    : You may obtain a copy of the License at
    :
    : http://www.apache.org/licenses/LICENSE-2.0
    :
    : Unless required by applicable law or agreed to in writing, software
    : distributed under the License is distributed on an "AS IS" BASIS,
    : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    : See the License for the specific language governing permissions and
    : limitations under the License.
    :
    : The use of the Apache License does not indicate that this project is
    : affiliated with the Apache Software Foundation.
-->
<!-- cf https://github.com/mblakele/xqut -->
<suite xmlns="com.blakeley.xqut"
       xmlns:xs="http://www.w3.org/2001/XMLSchema"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="com.blakeley.presta">
  <environment
      root="/Users/mblakele/Source/mblakele-presta/src/"
      database-name="Documents">
    <import prefix="p" ns="com.blakeley.presta" at="presta.xqy"/>
  </environment>

  <setup>p:install()</setup>

  <unit note="parse test" fatal="true">()</unit>

  <unit note="appkey">
    <result xsi:type="xs:boolean">true</result>
    <expr>xdmp:hex-to-integer(p:appkey()) eq xdmp:server()</expr>
  </unit>

  <unit note="appkey-set">
    <result xsi:type="xs:string">TEST</result>
    <expr>
      p:appkey-set('TEST'),
      p:appkey()
    </expr>
  </unit>

  <unit note="prepare">
    <result xsi:type="xs:boolean">true</result>
    <expr>
      p:appkey-set('TEST'),
      let $xqy := 'declare variable $ID external; xdmp:log("hello world!")'
      return p:prepare($xqy) instance of xs:unsignedLong
    </expr>
  </unit>

  <unit note="invoke prepared">
    <result xsi:type="xs:integer">55</result>
    <expr>
      p:appkey-set('TEST'),
      let $xqy := 'declare variable $ID external; $ID'
      let $presta-id := p:prepare($xqy)
      return sum(
        for $i in 1 to 10 return p:invoke(
          $presta-id, (xs:QName('ID'), $i)))
    </expr>
  </unit>

  <unit note="xslt-invoke prepared" fatal="true">
    <!-- result will be empty -->
    <expr>
      p:appkey-set('TEST'),
      let $source := &lt;xsl:stylesheet
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xdmp="http://marklogic.com/xdmp"
        version="2.0">
        &lt;xsl:template match="*">
        &lt;xsl:apply-templates select="xdmp:sleep(5)"/>
        &lt;/xsl:template>
      &lt;/xsl:stylesheet>
      let $presta-id := p:prepare($source)
      return p:xslt-invoke($presta-id, &lt;test/>)/*
    </expr>
  </unit>

<!-- TODO more unit tests -->

  <unit note="forget-all">
    p:appkey-set('TEST'),
    p:forget-all()
  </unit>

  <teardown>p:uninstall()</teardown>

</suite>
